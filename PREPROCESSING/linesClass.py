#!/usr/local/anaconda/bin/python2.7
'''
Created on Nov 7, 2013

@author: nancy
'''

#import TrxFunctionsClass
import pickle
global l

class Label():

    TS = 0              # UnixTimeStamp
    cId = 1             # Cluster Id - Not In Use 
    subId = 2           # ml - Not In Use
    uId = 3             # User Id
    bSesId = 4          # Browser Session Id
    IP = 5              # IP
    countryId = 6       # Country Id
    CUA = 7             # Client User Agent - consider using the splited str (OS, browser,...) 
    isFromOneWay = 8    # isFromOneWay - Not In Use
    isLink = 9          # Is Link
    httpRefer = 10      # Http Refer - Not In Use
    prevSite = 11       # Previous Site
    reqSite = 12        # Requested Site
    httpCode = 13       # HttpCode
    httpRedirectToUrl = 14   # Http Redirect To URL- if httpCode starts with 3XX the redirected URL will appear here
    domain = 15         # The requested Site's Domain
    isRisky = 16        # Risk Indicator - if malware OR copyright OR keyword
    malRisk = 17        # Indicator, 1 = include malware black list 
    copyrightRisk = 18  # Indicator, 1 = include Google removed domains (copyrights) 
    keywordRisk = 19    # Indicator, 1 = include keywords
    countryName = 20    # Country name 
    utcDate =  21       # Calculated time fields
    dayInWeek = 22      # Calculated time fields
    isWeekend = 23      # Calculated time fields
    time = 24           # Calculated time fields
    hour = 25           # Calculated time fields
    partOfDay = 26      # Calculated time fields 
    isReqSiteHttps = 27 # Indicator for https requested site  
    genSesId = 28       # Generated by generateSessionAndTimeSpent() function
    shouldProcess = 29
    timeSpent = 30      # Approximated Time Spent in a site, by the prevSite = reqSite (see function calcTimeSpent())
    hasChild = 31
    prevDomain = 32     # previous site domain
    riskRank = 33       # risk rank of requested site domain
    prevDomainRiskRank = 34 # risk rank of previous site domain
    RedirDomain = 35    # the domain of the redirectToURL (of #14), empty ('') if #14 is ' '.
    RedirDomainRiskRank = 36    # risk rank of the redirectTo URL domain (#35)
     
    
    
class Logs():

    lines = []    
    
    
    def readSourceLogFiles(self, Files):
        
        for File in Files:  
            with open(File,"r") as myFile:      
                for line in myFile:
                    line = line.rstrip()
                    x = [str(s) for s in line.split('\t')] 
                    
                    x = self.handelMissingColumns(x) # In case a row does'nt have some values
                    
                    self.lines.append(x)
                    '''cyclic dependencies...
                    #add extracted data- for now only the risk indicators are relevant
                    TrxFunctionsClass.addExtractedData_domainsGraph(line)'''
        return
    
    def handelMissingColumns(self,line):
        # for example, Http Code is missing
      
        if (len(line) < 15):
            for i in range(len(line),15): 
                line.append('')#line += ' '        
        return line
    
    def writeListToFile(self,filePath):
        with open(filePath, 'wb') as f:
            pickle.dump(self.lines, f)
        return
    
    def readListFromFile(self,filePath):
        with open(filePath, 'rb') as f:
            self.lines = pickle.load(f)
        return
    
    def cleanLines(self):
        self.lines = [line for line in self.lines if line[lbl.shouldProcess]]
        return
    
    def clear(self):
        del self.lines[:]
        return
    
    
def extractArgsFromLine(line,argsList):
    results = []
    for arg in argsList:
        results.append(line[arg]) 
        
    if len(results) == 1:   return results[0]   # don't return it as a list!
    else:                   return results
    
l=Logs()    #Instantiation
lbl=Label()   
